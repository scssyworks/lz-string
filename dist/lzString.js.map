{"version":3,"file":"lzString.js","sources":["../src/modules/fromCharCode.js","../src/modules/compress.js","../src/modules/decompress.js","../src/modules/getBaseValue.js","../src/modules/base64.js","../src/modules/utf16.js","../src/modules/uint8array.js","../src/modules/encodedURIComponent.js","../src/lz-string.js"],"sourcesContent":["export const f = String.fromCharCode;","import { f } from './fromCharCode';\n\nfunction _hasOwn(ob, key) {\n    return Object.prototype.hasOwnProperty.call(ob, key);\n}\n\nfunction _updateContext(context, bitsPerChar, getCharFromInt) {\n    if (_hasOwn(context.context_dictionaryToCreate, context.context_w)) {\n        if (context.context_w.charCodeAt(0) < 256) {\n            for (let i = 0; i < context.context_numBits; i++) {\n                context.context_data_val = (context.context_data_val << 1);\n                if (context.context_data_position == bitsPerChar - 1) {\n                    context.context_data_position = 0;\n                    context.context_data.push(getCharFromInt(context.context_data_val));\n                    context.context_data_val = 0;\n                } else {\n                    context.context_data_position++;\n                }\n            }\n            context.value = context.context_w.charCodeAt(0);\n            for (let i = 0; i < 8; i++) {\n                context.context_data_val = (context.context_data_val << 1) | (context.value & 1);\n                if (context.context_data_position == bitsPerChar - 1) {\n                    context.context_data_position = 0;\n                    context.context_data.push(getCharFromInt(context.context_data_val));\n                    context.context_data_val = 0;\n                } else {\n                    context.context_data_position++;\n                }\n                context.value = context.value >> 1;\n            }\n        } else {\n            context.value = 1;\n            for (let i = 0; i < context.context_numBits; i++) {\n                context.context_data_val = (context.context_data_val << 1) | context.value;\n                if (context.context_data_position == bitsPerChar - 1) {\n                    context.context_data_position = 0;\n                    context.context_data.push(getCharFromInt(context.context_data_val));\n                    context.context_data_val = 0;\n                } else {\n                    context.context_data_position++;\n                }\n                context.value = 0;\n            }\n            context.value = context.context_w.charCodeAt(0);\n            for (let i = 0; i < 16; i++) {\n                context.context_data_val = (context.context_data_val << 1) | (context.value & 1);\n                if (context.context_data_position == bitsPerChar - 1) {\n                    context.context_data_position = 0;\n                    context.context_data.push(getCharFromInt(context.context_data_val));\n                    context.context_data_val = 0;\n                } else {\n                    context.context_data_position++;\n                }\n                context.value = context.value >> 1;\n            }\n        }\n        context.context_enlargeIn--;\n        if (context.context_enlargeIn == 0) {\n            context.context_enlargeIn = Math.pow(2, context.context_numBits);\n            context.context_numBits++;\n        }\n        delete context.context_dictionaryToCreate[context.context_w];\n    } else {\n        context.value = context.context_dictionary[context.context_w];\n        for (let i = 0; i < context.context_numBits; i++) {\n            context.context_data_val = (context.context_data_val << 1) | (context.value & 1);\n            if (context.context_data_position == bitsPerChar - 1) {\n                context.context_data_position = 0;\n                context.context_data.push(getCharFromInt(context.context_data_val));\n                context.context_data_val = 0;\n            } else {\n                context.context_data_position++;\n            }\n            context.value = context.value >> 1;\n        }\n    }\n    context.context_enlargeIn--;\n    if (context.context_enlargeIn == 0) {\n        context.context_enlargeIn = Math.pow(2, context.context_numBits);\n        context.context_numBits++;\n    }\n}\n\nfunction compress(uncompressed = '', bitsPerChar, getCharFromInt) {\n    if (uncompressed === null) {\n        return '';\n    }\n    const context = {\n        context_dictionary: {},\n        context_dictionaryToCreate: {},\n        context_data: [],\n        context_c: \"\",\n        context_wc: \"\",\n        context_w: \"\",\n        context_enlargeIn: 2,\n        context_dictSize: 3,\n        context_numBits: 2,\n        context_data_val: 0,\n        context_data_position: 0\n    };\n    let i = 0;\n    for (let ii = 0; ii < uncompressed.length; ii += 1) {\n        context.context_c = uncompressed.charAt(ii);\n        if (!_hasOwn(context.context_dictionary, context.context_c)) {\n            context.context_dictionary[context.context_c] = context.context_dictSize++;\n            context.context_dictionaryToCreate[context.context_c] = true;\n        }\n        context.context_wc = context.context_w + context.context_c;\n        if (_hasOwn(context.context_dictionary, context.context_wc)) {\n            context.context_w = context.context_wc;\n        } else {\n            _updateContext(context, bitsPerChar, getCharFromInt);\n            context.context_dictionary[context.context_wc] = context.context_dictSize++;\n            context.context_w = String(context.context_c);\n        }\n    }\n    if (context.context_w !== \"\") {\n        _updateContext(context, bitsPerChar, getCharFromInt);\n    }\n    context.value = 2;\n    for (i = 0; i < context.context_numBits; i++) {\n        context.context_data_val = (context.context_data_val << 1) | (context.value & 1);\n        if (context.context_data_position == bitsPerChar - 1) {\n            context.context_data_position = 0;\n            context.context_data.push(getCharFromInt(context.context_data_val));\n            context.context_data_val = 0;\n        } else {\n            context.context_data_position++;\n        }\n        context.value = context.value >> 1;\n    }\n    // Flush the last char\n    while (true) {\n        context.context_data_val = (context.context_data_val << 1);\n        if (context.context_data_position == bitsPerChar - 1) {\n            context.context_data.push(getCharFromInt(context.context_data_val));\n            break;\n        }\n        else context.context_data_position++;\n    }\n    return context.context_data.join('');\n}\n\nfunction compressImpl(uncompressed = '') {\n    if (uncompressed === null) {\n        return '';\n    }\n    return compress(uncompressed, 16, (a) => f(a));\n}\n\nexport default compress;\nexport { compressImpl };","import { f } from './fromCharCode';\n\nfunction decompress(length, resetValue, getNextValue) {\n    const dictionary = [];\n    const data = {\n        val: getNextValue(0),\n        position: resetValue,\n        index: 1\n    };\n    const result = [];\n    let next;\n    let enlargeIn = 4;\n    let dictSize = 4;\n    let numBits = 3;\n    let entry = \"\";\n    let w;\n    let resb;\n    let c;\n\n    for (let i = 0; i < 3; i += 1) {\n        dictionary[i] = i;\n    }\n    let bits = 0;\n    let maxpower = Math.pow(2, 2);\n    let power = 1;\n    while (power !== maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position === 0) {\n            data.position = resetValue;\n            data.val = getNextValue(data.index++);\n        }\n        bits |= (resb > 0 ? 1 : 0) * power;\n        power <<= 1;\n    }\n    next = bits;\n    switch (next) {\n        case 0:\n            bits = 0;\n            maxpower = Math.pow(2, 8);\n            power = 1;\n            while (power !== maxpower) {\n                resb = data.val & data.position;\n                data.position >>= 1;\n                if (data.position === 0) {\n                    data.position = resetValue;\n                    data.val = getNextValue(data.index++);\n                }\n                bits |= (resb > 0 ? 1 : 0) * power;\n                power <<= 1;\n            }\n            c = f(bits);\n            break;\n        case 1:\n            bits = 0;\n            maxpower = Math.pow(2, 16);\n            power = 1;\n            while (power !== maxpower) {\n                resb = data.val & data.position;\n                data.position >>= 1;\n                if (data.position === 0) {\n                    data.position = resetValue;\n                    data.val = getNextValue(data.index++);\n                }\n                bits |= (resb > 0 ? 1 : 0) * power;\n                power <<= 1;\n            }\n            c = f(bits);\n            break;\n        case 2:\n            return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n        if (data.index > length) {\n            return \"\";\n        }\n        bits = 0;\n        maxpower = Math.pow(2, numBits);\n        power = 1;\n        while (power !== maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position === 0) {\n                data.position = resetValue;\n                data.val = getNextValue(data.index++);\n            }\n            bits |= (resb > 0 ? 1 : 0) * power;\n            power <<= 1;\n        }\n        switch (c = bits) {\n            case 0:\n                bits = 0;\n                maxpower = Math.pow(2, 8);\n                power = 1;\n                while (power !== maxpower) {\n                    resb = data.val & data.position;\n                    data.position >>= 1;\n                    if (data.position === 0) {\n                        data.position = resetValue;\n                        data.val = getNextValue(data.index++);\n                    }\n                    bits |= (resb > 0 ? 1 : 0) * power;\n                    power <<= 1;\n                }\n\n                dictionary[dictSize++] = f(bits);\n                c = dictSize - 1;\n                enlargeIn--;\n                break;\n            case 1:\n                bits = 0;\n                maxpower = Math.pow(2, 16);\n                power = 1;\n                while (power !== maxpower) {\n                    resb = data.val & data.position;\n                    data.position >>= 1;\n                    if (data.position === 0) {\n                        data.position = resetValue;\n                        data.val = getNextValue(data.index++);\n                    }\n                    bits |= (resb > 0 ? 1 : 0) * power;\n                    power <<= 1;\n                }\n                dictionary[dictSize++] = f(bits);\n                c = dictSize - 1;\n                enlargeIn--;\n                break;\n            case 2:\n                return result.join('');\n        }\n        if (enlargeIn === 0) {\n            enlargeIn = Math.pow(2, numBits);\n            numBits++;\n        }\n        if (dictionary[c]) {\n            entry = dictionary[c];\n        } else {\n            if (c === dictSize) {\n                entry = w + w.charAt(0);\n            } else {\n                return null;\n            }\n        }\n        result.push(entry);\n        dictionary[dictSize++] = w + entry.charAt(0);\n        enlargeIn--;\n        w = entry;\n        if (enlargeIn === 0) {\n            enlargeIn = Math.pow(2, numBits);\n            numBits++;\n        }\n    }\n}\n\nfunction decompressImpl(compressed = '') {\n    if (compressed === null) {\n        return '';\n    }\n    if (compressed === '') {\n        return null;\n    }\n    return decompress(compressed, 32768, (index) => compressed.charCodeAt(index));\n}\n\nexport default decompress;\nexport { decompressImpl };","const baseReverseDic = {};\n\nexport function getBaseValue(alphabet, character) {\n    if (!baseReverseDic[alphabet]) {\n        baseReverseDic[alphabet] = {};\n        for (let i = 0; i < alphabet.length; i++) {\n            baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n        }\n    }\n    return baseReverseDic[alphabet][character];\n}","import compress from './compress';\nimport decompress from './decompress';\nimport { getBaseValue } from './getBaseValue';\n\nconst keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nexport function toBase64(input = \"\") {\n    if (input === null) {\n        return \"\";\n    }\n    let res = compress(input, 6, (a) => keyStrBase64.charAt(a));\n    switch (res.length % 3) {\n        default:\n        case 0: return res;\n        case 1: return `${res}==`;\n        case 2: return `${res}=`;\n    }\n}\n\nexport function fromBase64(input = \"\") {\n    if (input === null) {\n        return \"\";\n    }\n    if (input === \"\") {\n        return null;\n    }\n    return decompress(input.length, 32, (index) => getBaseValue(keyStrBase64, input.charAt(index)));\n}","import compress from './compress';\nimport decompress from './decompress';\nimport { f } from './fromCharCode';\n\nexport function toUTF16(input = '') {\n    if (input === null) {\n        return '';\n    }\n    return compress(input, 15, (a) => f(a + 32)) + ' ';\n}\n\nexport function fromUTF16(compressed = '') {\n    if (compress === null) {\n        return '';\n    }\n    if (compress === '') {\n        return null;\n    }\n    return decompress(compressed.length, 16384, (index) => (compressed.charCodeAt(index) - 32));\n}","import { compressImpl as compress } from './compress';\nimport { decompressImpl as decompress } from './decompress';\nimport { f } from './fromCharCode';\n\nexport function toUint8Array(uncompressed) {\n    const compressed = compress(uncompressed);\n    const buf = new Uint16Array(compressed.length * 2);\n    for (let i = 0, TotalLen = compressed.length; i < TotalLen; i++) {\n        var current_value = compressed.charCodeAt(i);\n        buf[i * 2] = current_value >>> 8;\n        buf[i * 2 + 1] = current_value % 256;\n    }\n    return buf;\n}\n\nexport function fromUint8Array(compressed) {\n    if (compressed == null) {\n        return decompress(compressed);\n    }\n    const buf = new Array(compressed.length / 2);\n    for (let i = 0, TotalLen = buf.length; i < TotalLen; i++) {\n        buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1];\n    }\n\n    const result = [];\n    buf.forEach(function (c) {\n        result.push(f(c));\n    });\n    return decompress(result.join(''));\n}","import compress from './compress';\nimport decompress from './decompress';\nimport { getBaseValue } from './getBaseValue';\n\nconst keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\n\nexport function toEncodedURIComponent(input = '') {\n    if (input === null) {\n        return '';\n    }\n    return compress(input, 6, (a) => keyStrUriSafe.charAt(a));\n}\n\nexport function fromEncodedURIComponent(input = '') {\n    if (input === null) {\n        return '';\n    }\n    if (input === '') {\n        return null;\n    }\n    input = input.replace(/\\s/g, \"+\");\n    return decompress(input.length, 32, (index) => getBaseValue(keyStrUriSafe, input.charAt(index)));\n}","import { toBase64 as compressToBase64, fromBase64 as decompressFromBase64 } from './modules/base64';\nimport { toUTF16 as compressToUTF16, fromUTF16 as decompressFromUTF16 } from './modules/utf16';\nimport { toUint8Array as compressToUint8Array, fromUint8Array as decompressFromUint8Array } from './modules/uint8array';\nimport { toEncodedURIComponent as compressToEncodedURIComponent, fromEncodedURIComponent as decompressFromEncodedURIComponent } from './modules/encodedURIComponent';\nimport { compressImpl as compress } from './modules/compress';\nimport { decompressImpl as decompress } from './modules/decompress';\n\nconst LZString = {\n  compressToBase64,\n  decompressFromBase64,\n  compressToUTF16,\n  decompressFromUTF16,\n  compressToEncodedURIComponent,\n  decompressFromEncodedURIComponent,\n  compressToUint8Array,\n  decompressFromUint8Array,\n  compress,\n  decompress\n};\n\nexport default LZString;"],"names":["f","String","fromCharCode","_hasOwn","ob","key","Object","prototype","hasOwnProperty","call","_updateContext","context","bitsPerChar","getCharFromInt","context_dictionaryToCreate","context_w","charCodeAt","i","context_numBits","context_data_val","context_data_position","context_data","push","value","context_enlargeIn","Math","pow","context_dictionary","compress","uncompressed","context_c","context_wc","context_dictSize","ii","length","charAt","join","compressImpl","a","decompress","resetValue","getNextValue","dictionary","data","val","position","index","result","next","enlargeIn","dictSize","numBits","entry","w","resb","c","bits","maxpower","power","decompressImpl","compressed","baseReverseDic","getBaseValue","alphabet","character","keyStrBase64","toBase64","input","res","fromBase64","toUTF16","fromUTF16","toUint8Array","buf","Uint16Array","TotalLen","current_value","fromUint8Array","Array","forEach","keyStrUriSafe","toEncodedURIComponent","fromEncodedURIComponent","replace","LZString","compressToBase64","decompressFromBase64","compressToUTF16","decompressFromUTF16","compressToEncodedURIComponent","decompressFromEncodedURIComponent","compressToUint8Array","decompressFromUint8Array"],"mappings":"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"}